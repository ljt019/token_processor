name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Run cargo tests
        run: cargo test --locked --verbose

  doc_tests:
    name: Run Documentation Tests
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Run cargo doc tests
        run: cargo test --doc --locked --verbose

  build:
    name: Build Release Artifacts
    needs: doc_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build release
        run: cargo build --release --locked

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-asset
          path: target/release/token_processor.exe

  publish_to_crates_io:
    name: Publish to crates.io
    needs: build 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Publish crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish --locked

  create_github_release:
    name: Create Github Release
    needs: build 
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: release-asset

      - name: Extract version from Cargo.toml
        id: get_version
        run: echo "::set-output name=version::$(grep '^version =' Cargo.toml | cut -d '"' -f 2)"

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "token_processor.exe"
          tag: v${{ steps.get_version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }} 
